<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    These targets use MSBuild Exec tasks to run WiX 3 toolset commands.

    WiX 4 is expected to support running in .NET Core. Once using WiX 4, we can (more easily) remove
    this file and switch to wixproj. See https://github.com/wixtoolset/issues/issues/5627
  -->

  <UsingTask TaskName="ExecWithRetries" AssemblyFile="$(LocalBuildToolsTaskFile)" />

  <!--
    Generate bundle upgrade code. This code needs to be constant within a product band for upgrades.
  -->
  <Target Name="GetBundleUpgradeCode"
          DependsOnTargets="GetWixBuildConfiguration"
          Condition="
            '$(GenerateExeBundle)' == 'true' and
            '$(UpgradeCode)' == ''">
    <Error
      Condition="'$(BundleInstallerUpgradeCodeSeed)' == ''"
      Text="BundleInstallerUpgradeCodeSeed not defined. Required to produce a stable bundle upgrade code." />

    <PropertyGroup>
      <BundleInstallerOutputGuidString>$(BundleInstallerUpgradeCodeSeed) $(ProductBandVersion) $(PackageTargetRid)</BundleInstallerOutputGuidString>
    </PropertyGroup>

    <GenerateGuidFromName Name="$(BundleInstallerOutputGuidString)">
      <Output TaskParameter="GeneratedGuid" PropertyName="UpgradeCode" />
    </GenerateGuidFromName>
  </Target>

  <!--
    If UpgradeCode isn't already set, generate one based on installer full path.
  -->
  <Target Name="GetUpgradeCode"
          DependsOnTargets="GetWixBuildConfiguration"
          Condition="'$(UpgradeCode)' == ''">
    <GenerateGuidFromName Name="$(OutInstallerFile)">
      <Output TaskParameter="GeneratedGuid" PropertyName="UpgradeCode" />
    </GenerateGuidFromName>
  </Target>

  <!-- Set up information to pass to WiX, depending on the type of installer being created. -->
  <Target Name="GetWixBuildConfiguration"
          DependsOnTargets="
            AcquireWix;
            GetInstallerProperties;
            GetInstallerLocations;
            GenerateMsiVersionString;
            GetBundledMsiFiles">
    <PropertyGroup>
      <OutInstallerFile>$(InstallerFile)</OutInstallerFile>
    </PropertyGroup>

    <ItemGroup>
      <ProductWixExtensions Include="WixUIExtension.dll" />
      <ProductWixExtensions Include="WixDependencyExtension.dll" />

      <BundleWixExtensions Include="WixBalExtension.dll" />
      <BundleWixExtensions Include="WixTagExtension.dll" />

      <WixExtensions Include="WixUtilExtension.dll" />
    </ItemGroup>

    <ItemGroup Condition="'$(FrameworkPackType)' != ''">
      <DirectoryToHarvest
        Include="$(PackLayoutDir)"
        Name="install-files"
        SubstituteVar="PackSrc"
        ComponentGroupName="InstallFiles"
        DirectoryRef="DOTNETHOME" />

      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/product.wxs" />
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/provider.wxs" />

      <WixExtensions Include="@(ProductWixExtensions)" />
    </ItemGroup>

    <ItemGroup Condition="'$(GenerateSharedFramework)' == 'true'">
      <DirectoryToHarvest
        Include="$(SharedFrameworkLayoutDir)shared/"
        Name="install-shared-framework"
        SubstituteVar="SharedFrameworkSrc"
        ComponentGroupName="InstallFiles"
        DirectoryRef="SHARED" />

      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/product.wxs" />
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/sharedfxdir.wxs" />
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/registrykeys.wxs" />
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/provider.wxs" />

      <WixExtensions Include="@(ProductWixExtensions)" />

      <CandleVariables Include="AuthoredRegistryKeys" Value="true" />
      <CandleVariables Include="RegKeyNugetVersionExistence" Value="true" />
    </ItemGroup>

    <ItemGroup Condition="'$(GenerateSharedFrameworkPart)' == 'true'">
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/product.wxs" />
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/registrykeys.wxs" />
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/provider.wxs" />

      <WixExtensions Include="@(ProductWixExtensions)" />
    </ItemGroup>

    <ItemGroup Condition="'$(GenerateExeBundle)' == 'true'">
      <LocFile Include="theme\**\bundle.wxl" />
      <LocDirName Include="$([System.String]::new('%(LocFile.RecursiveDir)').TrimEnd('\'))" />

      <CandleVariables Include="DisplayVersion" Value="$(MajorVersion).$(MinorVersion).$(PatchVersion).$(BuildNumberMajor)" />
      <CandleVariables Include="ProductBandVersion" Value="$(ProductBandVersion)" />
      <CandleVariables Include="FrameworkDisplayVersion" Value="$(ProductVersion)" />
      <CandleVariables Include="LcidList" Value="@(LocDirName)" />

      <CandleVariables Include="DotNetBackgroundPngFile" Value="$(MSBuildThisFileDirectory)..\..\packaging\osx\sharedframework\resources\dotnetbackground.png" />
      <CandleVariables Include="DotNetDummyEulaFile" Value="$(MSBuildThisFileDirectory)bundle\dummyEula.rtf" />

      <WixSrcFile Include="$(MSBuildThisFileDirectory)bundle/bundle.wxs" />

      <WixExtensions Include="@(BundleWixExtensions)" />
    </ItemGroup>

    <PropertyGroup Condition="'$(GenerateExeBundle)' == 'true'">
      <OutInstallerFile>$(ExeBundleInstallerFile)</OutInstallerFile>
    </PropertyGroup>

    <ItemGroup Condition="'@(DirectoryToHarvest)' != ''">
      <CandleVariables Include="InstallFiles" Value="true" />
    </ItemGroup>

    <ItemGroup Condition="'$(IncludeWerRelatedKeys)' == 'true'">
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/werrelatedkeys.wxs" />
      <CandleVariables Include="WerRelatedKeys" Value="true" />
    </ItemGroup>

    <ItemGroup Condition="'$(IncludeBreadcrumbStoreFolder)' == 'true'">
      <WixSrcFile Include="$(MSBuildThisFileDirectory)product/breadcrumbstorefolder.wxs" />
      <CandleVariables Include="BreadcrumbStoreFolder" Value="true" />
    </ItemGroup>

    <ItemGroup>
      <CandleVariables Include="MicrosoftEula" Value="$(MSBuildThisFileDirectory)eula.rtf" />
    </ItemGroup>
  </Target>

  <!--
    Ensure MSIs are built and signed (if necessary), then obtain all paths to MSIs to bundle from
    the bundle references.
  -->
  <Target Name="GetBundledMsiFiles">
    <MSBuild Projects="$(RepoRoot)signing\SignMsiFiles.proj" Targets="Build" />
    <MSBuild Projects="@(BundleComponentReference)" Targets="Build" />

    <MSBuild Projects="@(BundleComponentReference)" Targets="GetOutputWixInstallerFile">
      <Output TaskParameter="TargetOutputs" ItemName="BundleMsiFile" />
    </MSBuild>

    <ItemGroup>
      <CandleVariables Include="ChainedDotNetPackageFiles" Value="@(BundleMsiFile)" />
    </ItemGroup>
  </Target>

  <Target Name="RunHeatHarvester"
          Condition="'@(DirectoryToHarvest)' != ''"
          DependsOnTargets="GetWixBuildConfiguration">
    <ItemGroup>
      <DirectoryToHarvest
        WixSourceFile="$(WixObjDir)%(Name).wxs"
        WixObjFile="$(WixObjDir)%(Name).wixobj" />

      <DirectoryToHarvest
        Command="heat.exe ^
          dir &quot;%(Identity)&quot; ^
          -nologo ^
          -template fragment ^
          -sreg ^
          -gg ^
          -var var.%(SubstituteVar) ^
          -cg %(ComponentGroupName) ^
          -srd ^
          -dr %(DirectoryRef) ^
          -out %(WixSourceFile)" />
    </ItemGroup>

    <Exec
      Command="%(DirectoryToHarvest.Command)"
      WorkingDirectory="$(WixToolsDir)"
      StandardOutputImportance="normal" />
  </Target>

  <Target Name="RunCandleCompiler"
          DependsOnTargets="
            GetWixBuildConfiguration;
            GetBundleUpgradeCode;
            GetUpgradeCode;
            GenerateMsiVersionString">
    <PropertyGroup>
      <WixDependencyKeyName Condition="'$(WixDependencyKeyName)' == ''">$(InstallerName.Replace('-', '_'))</WixDependencyKeyName>
      <RegKeyProductName Condition="'$(RegKeyProductName)' == '' and '$(SharedFrameworkName)' != ''">sharedfx\$(SharedFrameworkName)</RegKeyProductName>
    </PropertyGroup>

    <ItemGroup>
      <CandleVariables Include="SharedWixDir" Value="$(MSBuildThisFileDirectory.TrimEnd('\'))" />
      <CandleVariables Include="DependencyKeyName" Value="$(WixDependencyKeyName)" />

      <CandleVariables Include="%(DirectoryToHarvest.SubstituteVar)" Value="%(DirectoryToHarvest.Identity)" />

      <CandleVariables Include="ExtraComponentGroupRefIds" Value="@(WixExtraComponentGroupRefId)" Condition="'@(WixExtraComponentGroupRefId)' != ''" />
      <CandleVariables Include="FrameworkName" Value="$(SharedFrameworkName)" Condition="'$(SharedFrameworkName)' != ''" />
      <CandleVariables Include="RegKeyProductName" Value="$(RegKeyProductName)" Condition="'$(RegKeyProductName)' != ''" />

      <CandleVariables Include="ProductMoniker" Value="$(WixProductMoniker)" />
      <CandleVariables Include="BuildVersion" Value="$(MsiVersionString)" />
      <CandleVariables Include="NugetVersion" Value="$(ProductVersion)" />
      <CandleVariables Include="TargetArchitecture" Value="$(TargetArchitecture)" />
      <CandleVariables Include="UpgradeCode" Value="$(UpgradeCode)" />
    </ItemGroup>

    <PropertyGroup>
      <_wixArgs></_wixArgs>
      <_wixArgs>$(_wixArgs) -nologo</_wixArgs>
      <_wixArgs>$(_wixArgs) -arch $(MsiArch)</_wixArgs>
      <_wixArgs>$(_wixArgs) -out "$(WixObjDir)"</_wixArgs>

      <_wixArgs>$(_wixArgs) @(WixExtensions -> '-ext %(Identity)', ' ')</_wixArgs>
      <_wixArgs>$(_wixArgs) @(CandleVariables -> '-d%(Identity)="%(Value)"', ' ')</_wixArgs>
      <_wixArgs>$(_wixArgs) @(WixSrcFile -> '"%(FullPath)"', ' ')</_wixArgs>
      <_wixArgs>$(_wixArgs) @(DirectoryToHarvest -> '"%(WixSourceFile)"', ' ')</_wixArgs>
    </PropertyGroup>

    <Exec
      Command="candle.exe $(_wixArgs)"
      WorkingDirectory="$(WixToolsDir)"
      StandardOutputImportance="normal" />
  </Target>

  <Target Name="RunLightLinker"
          DependsOnTargets="
            GetWixBuildConfiguration;
            RunHeatHarvester;
            RunCandleCompiler">
    <PropertyGroup>
      <_wixArgs></_wixArgs>
      <_wixArgs>$(_wixArgs) -nologo</_wixArgs>
      <_wixArgs>$(_wixArgs) -cultures:en-us</_wixArgs>
      <_wixArgs>$(_wixArgs) -out $(OutInstallerFile)</_wixArgs>

      <_wixArgs>$(_wixArgs) @(WixExtensions -> '-ext %(Identity)', ' ')</_wixArgs>
      <_wixArgs>$(_wixArgs) @(WixSrcFile -> '"$(WixObjDir)%(Filename).wixobj"', ' ')</_wixArgs>
      <_wixArgs>$(_wixArgs) @(DirectoryToHarvest -> '"%(WixObjFile)"', ' ')</_wixArgs>
    </PropertyGroup>

    <!--
      Run light.exe with retries. This is intended to avoid interference by Windows Defender by
      giving it time to catch up. Light creates a file then immediately moves it, which Defender
      sometimes blocks if the computer is too busy to check the file quickly enough. Use a small
      base because it usually resolves itself quickly.
    -->
    <ExecWithRetries
      Command="light.exe $(_wixArgs)"
      WorkingDirectory="$(WixToolsDir)"
      StandardOutputImportance="normal"
      IgnoreStandardErrorWarningFormat="true"
      RetryDelayBase="2" />
  </Target>

  <!--
    Entry point: create a NuGet package suitable for VS insertion.
  -->
  <Target Name="CreateVSInsertionNupkg"
          DependsOnTargets="
            EnsureMsiBuilt;
            GetInstallerProperties;
            CreateVSInsertionNupkgIfApplicable" />

  <!--
    When using the CreateVSInsertionNupkg entry point target, we have to make sure this project's
    MSI was created first.
  -->
  <Target Name="EnsureMsiBuilt">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Build" />
  </Target>

  <Target Name="CreateVSInsertionNupkgIfApplicable"
          Condition="'$(GenerateMSI)' == 'true'"
          DependsOnTargets="
            AcquireNuGetExe;
            GetWixBuildConfiguration">
    <PropertyGroup>
      <PackProperties />
      <PackProperties>$(PackProperties)COMPONENT_MSI=$(OutInstallerFile);</PackProperties>
      <PackProperties>$(PackProperties)ARCH=$(MsiArch);</PackProperties>
      <PackProperties>$(PackProperties)COMPONENT_NAME=$(VSInsertionComponentName);</PackProperties>
      <PackProperties>$(PackProperties)FRIENDLY_NAME=$(VSInsertionComponentFriendlyName);</PackProperties>
      <PackProperties>$(PackProperties)PROJECT_URL=$(ProjectUrl);</PackProperties>

      <PackArgs />
      <PackArgs>$(PackArgs) $(MSBuildThisFileDirectory)vs\VS.Redist.Common.Component.nuspec</PackArgs>
      <PackArgs>$(PackArgs) -Version $(ProductVersion)</PackArgs>
      <PackArgs>$(PackArgs) -OutputDirectory $(ArtifactsNonShippingPackagesDir)</PackArgs>
      <PackArgs>$(PackArgs) -NoDefaultExcludes</PackArgs>
      <PackArgs>$(PackArgs) -NoPackageAnalysis</PackArgs>
      <PackArgs>$(PackArgs) -Properties "$(PackProperties)"</PackArgs>
    </PropertyGroup>

    <Exec Command="$(NuGetExeFile) pack $(PackArgs)" />

    <Error
      Condition="!Exists('$(ArtifactsNonShippingPackagesDir)$(VSInsertionComponentName).$(ProductVersion).nupkg')"
      Text="Pack command didn't produce expected nupkg." />

    <Message Text="$(MSBuildProjectName) -> $(VSInsertionComponentName)" Importance="High" />
  </Target>

  <Target Name="ExtractEngineBundle">
    <Exec
      Command="insignia.exe -ib $(CombinedInstallerFile) -o $(CombinedInstallerEngine)"
      WorkingDirectory="$(WixToolsDir)" />
  </Target>

  <Target Name="ReattachEngineToBundle">
    <Exec
      Command="insignia.exe -ab $(CombinedInstallerEngine) $(CombinedInstallerFile) -o $(CombinedInstallerFile)"
      WorkingDirectory="$(WixToolsDir)" />
  </Target>

  <Target Name="GetOutputWixInstallerFile"
          DependsOnTargets="GetWixBuildConfiguration"
          Returns="$(OutInstallerFile)"/>

</Project>
