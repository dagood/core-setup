<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <UsingTask TaskName="DownloadFromAzure" AssemblyFile="$(LocalBuildToolsTaskFile)" />
  <UsingTask TaskName="FinalizeBuild" AssemblyFile="$(LocalBuildToolsTaskFile)" />
  <UsingTask TaskName="GenerateChecksums" AssemblyFile="$(LocalBuildToolsTaskFile)" />
  <UsingTask TaskName="ListAzureBlobs" AssemblyFile="$(LocalBuildToolsTaskFile)" />
  <UsingTask TaskName="UploadToAzure" AssemblyFile="$(LocalBuildToolsTaskFile)" />

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <Target Name="Build"
          DependsOnTargets="
            PublishDebFilesToDebianRepo;
            PublishFinalOutput;
            UpdateVersionsRepo" />

  <Target Name="PublishFinalOutput"
          DependsOnTargets="
            SignPackages;
            PublishNuGetPackages;
            PublishToAzure;
            RunPublishSymbols;
            FinalizeBuildInAzure" />

  <Target Name="SignPackages"
          Condition="'$(SkipSigning)' != 'true' and '$(SignType)' != 'public'">
    <MSBuild
      Projects="$(RepoRoot)signing\stages\SignFinalPackages.proj"
      Targets="Build"
      Properties="DownloadDirectory=$(DownloadDirectory)" />
  </Target>

  <!--
    Target wrapping UpdatePublishedVersions: ensures that ShippedNuGetPackage items are created and
    disables versions repo update if no auth token is defined. Otherwise, not specifying an auth
    token would cause an error.
  -->
  <Target Name="UpdateVersionsRepo"
          Condition="'$(GitHubAuthToken)' != ''"
          DependsOnTargets="FindDownloadedArtifacts;
                            UpdatePublishedVersions" />

  <!--
    Look through the downloaded artifacts to figure out how to ship them. Creates item groups for
    other types of publishing to use.
  -->
  <Target Name="FindDownloadedArtifacts">
    <ItemGroup>
      <DownloadedArtifactFile Include="$(DownloadDirectory)**" />

      <DownloadedSymbolNupkgFile Include="$(DownloadDirectory)**\*.symbols.nupkg" />
      <DownloadedNupkgFile
        Include="$(DownloadDirectory)**\*.nupkg"
        Exclude="@(DownloadedSymbolNupkgFile)" />

      <!-- RID-specific nupkg. These are published from every leg. -->
      <RuntimeNupkgFile Include="
        $(PackageOutputPath)**/runtime.*.nupkg;
        $(PackageOutputPath)**/*.Runtime.*.nupkg;
        $(PackageOutputPath)**/*.App.Host.*.nupkg;
        $(PackageOutputPath)**/VS.Redist.Common.*.nupkg" />

      <!--
        RID-agnostic nupkg. These are built with the same ID/version by every leg, so only one leg's
        results are published.
      -->
      <RidAgnosticNupkgToPublishFile
        Include="$(DownloadDirectory)$(PublishRidAgnosticPackagesFromJobName)\**\*.nupkg"
        Exclude="@(RuntimeNupkgFile)" />
      
      <RidAgnosticNupkgToIgnoreFile
        Include="@(DownloadedNupkgFile)"
        Exclude="@(RidAgnosticNupkgToPublishFile);@(RuntimeNupkgFile)" />

      <RidAgnosticSymbolNupkgToIgnoreFile
        Include="@(RidAgnosticNupkgToIgnoreFile -> '%(RootDir)%(Directory)%(Filename).symbols.nupkg')" />

      <NupkgToPublishFile Include="@(RuntimeNupkgFile);@(RidAgnosticNupkgToPublishFile)" />

      <!-- Other than nupkgs/symbols.nupkgs, the artifacts don't need filtering. -->
      <UploadToBlobStorageFile
        Include="@(DownloadedArtifactFile)"
        Exclude="@(RidAgnosticNupkgToIgnoreFile);@(RidAgnosticSymbolNupkgToIgnoreFile)" />

      <!-- Nupkgs to include in dotnet/versions update. -->
      <ShippedNuGetPackage Include="@(NupkgToPublishFile)" />
    </ItemGroup>
  </Target>

  <Target Name="CreateChecksums"
          DependsOnTargets="FindDownloadedArtifacts">
    <ItemGroup>
      <ArtifactsForGeneratingChecksums
        Include="@(DownloadedArtifactFile)"
        DestinationPath="%(ItemsToChecksum.FullPath)$(ChecksumExtension)" />
      
      <GeneratedChecksumFile Include="@(ArtifactsForGeneratingChecksums -> '%(DestinationPath)')" />
    </ItemGroup>

    <GenerateChecksums Items="@(ArtifactsForGeneratingChecksums)" />
  </Target>

  <!-- Publish to Azure blob storage. -->
  <Target Name="PublishToAzure"
          DependsOnTargets="
            UploadToAzure;
            UploadChecksumsToAzure" />

  <Target Name="UploadToAzure"
          DependsOnTargets="
            FindDownloadedArtifacts;
            SignPackages;
            GetProductVersions">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />

    <ItemGroup>
      <FileToPublish
        Include="@(UploadToBlobStorageFile)" 
        RelativeBlobPath="$(BinariesRelativePath)%(Filename)%(Extension)" />
    </ItemGroup>

    <Message Text="Uploading files to $(AzureAccountName)/$(ContainerName)/$(BinariesRelativePath)" />

    <UploadToAzure AccountName="$(AzureAccountName)"
                   AccountKey="$(AzureAccessToken)"
                   ContainerName="$(ContainerName)"
                   Items="@(FileToPublish)"
                   Overwrite="false" />
  </Target>

  <Target Name="UploadChecksumsToAzure"
          DependsOnTargets="
            FindDownloadedArtifacts;
            GetProductVersions;
            CreateChecksums">
    <Error Condition="'$(ChecksumAzureAccessToken)' == ''" Text="Missing required property 'ChecksumAzureAccessToken'" />
    <Error Condition="'$(ChecksumAzureAccountName)' == ''" Text="Missing required property 'ChecksumAzureAccountName'" />
    <Error Condition="'$(ChecksumContainerName)' == ''" Text="Missing required property 'ChecksumContainerName'" />

    <ItemGroup>
      <ChecksumToPublish
        Include="@(GeneratedChecksumFile)"
        RelativeBlobPath="$(BinariesRelativePath)/%(Filename)%(Extension)" />
    </ItemGroup>

    <Message Text="Uploading checksum files to $(ChecksumAzureAccountName)/$(ChecksumContainerName)/$(BinariesRelativePath)" />

    <UploadToAzure AccountName="$(ChecksumAzureAccountName)"
                   AccountKey="$(ChecksumAzureAccessToken)"
                   ContainerName="$(ChecksumContainerName)"
                   Items="@(ChecksumToPublish)"
                   Overwrite="false" />
  </Target>

  <Target Name="PublishDebFilesToDebianRepo"
          DependsOnTargets="GenerateDebRepoFiles"
          Condition="'$(DebRepoId)' != '' AND
                     '$(DebRepoUser)' != '' AND
                     '$(DebRepoPass)' != '' AND
                     '$(DebRepoServer)' != ''">
    <Exec Condition="'@(DebInstallerFile)' != ''"
          Command="$(ProjectDir)tools-local/scripts/publish/repoapi_client.sh $(DebRepoUser) $(DebRepoPass) $(DebRepoId) $(DebRepoServer) -addpkg %(DebInstallerFile.UploadJsonFilename)" />
  </Target>

  <Target Name="FinalizeBuildInAzure"
          DependsOnTargets="
            GetProductVersions;
            CheckIfAllBuildsHavePublished;
            GetLatestCommitHash">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Error Condition="'$(LatestCommit)' == ''" Text="Missing required property 'LatestCommit'" />

    <Message Importance="High" Text="Finalizing Build" />
    <!-- Ensure all publish pieces are present and then publish to Azure Latest container -->
    <FinalizeBuild AccountName="$(AzureAccountName)"
                   AccountKey="$(AzureAccessToken)"
                   ContainerName="$(ContainerName)"
                   SemaphoreBlob="Runtime/$(Channel)/sharedFxPublishSemaphore"
                   Channel="$(Channel)"
                   Version="$(SharedFrameworkNugetVersion)"
                   SharedFrameworkNugetVersion="$(SharedFrameworkNugetVersion)"
                   SharedHostNuGetVersion="$(HostVersion)"
                   ProductVersion="$(ProductVersion)"
                   CommitHash="$(LatestCommit)"
                   FinalizeContainer="Runtime/$(SharedFrameworkNugetVersion)"
                   ForcePublish="true"
                   Condition="'@(_MissingBlobNames)' == ''" />
    <Error Condition="'$(ChecksumAzureAccessToken)' == ''" Text="Missing required property 'ChecksumAzureAccessToken'" />
    <Error Condition="'$(ChecksumAzureAccountName)' == ''" Text="Missing required property 'ChecksumAzureAccountName'" />
    <Error Condition="'$(ChecksumContainerName)' == ''" Text="Missing required property 'ChecksumContainerName'" />
    <Message Importance="High" Text="Finalizing Checksums" />
    <FinalizeBuild AccountName="$(ChecksumAzureAccountName)"
                   AccountKey="$(ChecksumAzureAccessToken)"
                   ContainerName="$(ChecksumContainerName)"
                   SemaphoreBlob="Runtime/$(Channel)/checksumPublishSemaphore"
                   Channel="$(Channel)"
                   Version="$(SharedFrameworkNugetVersion)"
                   SharedFrameworkNugetVersion="$(SharedFrameworkNugetVersion)"
                   SharedHostNuGetVersion="$(HostVersion)"
                   ProductVersion="$(ProductVersion)"
                   CommitHash="$(LatestCommit)"
                   FinalizeContainer="Runtime/$(SharedFrameworkNugetVersion)"
                   ForcePublish="true" />
  </Target>

  <Target Name="PublishNuGetPackages"
          DependsOnTargets="
            FindDownloadedArtifacts;
            SignPackages;
            DoPushNuGetPackagesToAzure"
          Condition="'@(_MissingBlobNames)' == ''">
    <Error Condition="'$(AzureAccessToken)' == ''" Text="Missing required property 'AzureAccessToken'" />
    <Error Condition="'$(AzureAccountName)' == ''" Text="Missing required property 'AzureAccountName'" />
    <Error Condition="'$(ContainerName)' == ''" Text="Missing required property 'ContainerName'" />
    <Message Condition="'$(WindowsSdkDir)' == ''" Text="Windows SDK not found.  Symbols packages will not be signed." />
  </Target>

  <Target Name="RunPublishSymbols"
          Condition="'$(SkipPublishSymbols)' != 'true'">
    <ItemGroup>
      <SymbolServerConfig
        Include="msdl"
        Url="https://microsoftpublicsymbols.artifacts.visualstudio.com/DefaultCollection" 
        Pat="$(MicrosoftSymbolServerPat)" />

      <SymbolServerConfig
        Include="symweb"
        Url="https://microsoft.artifacts.visualstudio.com/DefaultCollection" 
        Pat="$(SymwebSymbolServerPat)" />
    </ItemGroup>

    <Error
      Condition="'%(SymbolServerConfig.Pat)' == ''"
      Text="Missing symbol server publish PAT for '%(SymbolServerConfig.Identity)'" />

    <ItemGroup>
      <SymbolServerPublishProject
        Include="$(MSBuildProjectFullPath)"
        AdditionalProperties="
          SymbolServerPath=%(SymbolServerConfig.Url);
          SymbolServerPAT=%(SymbolServerConfig.Pat)" />
    </ItemGroup>

    <!-- Note: Can't run in parallel. Symbol publish opens the zips exclusively. -->
    <MSBuild
      Projects="@(SymbolServerPublishProject)"
      Targets="SetupPublishSymbols;PublishSymbols"
      Properties="DownloadDirectory=$(DownloadDirectory)" />
  </Target>

  <Target Name="SetupPublishSymbols"
          DependsOnTargets="FindDownloadedArtifacts">
    <PropertyGroup>
      <SymbolExpirationInDays>180</SymbolExpirationInDays>
    </PropertyGroup>

    <ItemGroup>
      <SymbolPackagesToPublish
        Include="@(DownloadedSymbolNupkgFile)"
        Exclude="@(RidAgnosticSymbolNupkgToIgnoreFile)" />
    </ItemGroup>

    <Message Importance="High" Text="Publishing symbol packages to '$(SymbolServerPath)': @(SymbolPackagesToPublish)"/>
  </Target>

  <Target Name="DoPushNuGetPackagesToAzure"
          DependsOnTargets="
            PublishToAzureBlobFeed;
            PublishFilesToAzureBlobFeed" />

  <Target Name="PublishToAzureBlobFeed">
    <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />
    <Error Condition="'$(TransportFeedAccessToken)'==''" Text="Missing property TransportFeedAccessToken" />
    <PropertyGroup>
      <ExpectedFeedUrl>$(PackagesUrl)</ExpectedFeedUrl>
      <AssetManifestFilePath>$(BUILD_SOURCESDIRECTORY)/artifacts/log/AssetManifest/Manifest.xml</AssetManifestFilePath>
    </PropertyGroup>

    <ItemGroup>
      <ItemsToPush Remove="@(ItemsToPush)" />
      <ItemsToPush Include="@(NupkgToPublishFile)" />
      <ItemsToPush Include="@(DownloadedSymbolNupkgFile)" />
    </ItemGroup>

    <PushToBlobFeed ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(TransportFeedAccessToken)"
                    ItemsToPush="@(ItemsToPush)"
                    Overwrite="$(OverwriteOnPublish)" 
                    ManifestBuildData="Location=$(ExpectedFeedUrl)"
                    ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
                    ManifestBranch="$(BUILD_SOURCEBRANCH)"
                    ManifestBuildId="$(BUILD_BUILDNUMBER)"
                    ManifestCommit="$(BUILD_SOURCEVERSION)" 
                    AssetManifestPath="$(AssetManifestFilePath)"
                    />
  </Target>

  <Target Name="PublishFilesToAzureBlobFeed"
          DependsOnTargets="
            CreateChecksums;
            GetProductVersions">
    <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />
    <Error Condition="'$(TransportFeedAccessToken)'==''" Text="Missing property TransportFeedAccessToken" />
    <PropertyGroup>
      <ExpectedFeedUrl>$(PackagesUrl)</ExpectedFeedUrl>
      <AssetManifestFilePath>$(BUILD_SOURCESDIRECTORY)/artifacts/log/AssetManifest/Manifest_Installers.xml</AssetManifestFilePath>
    </PropertyGroup>

    <ItemGroup>
      <ItemsToPush Remove="@(ItemsToPush)" />
      <ItemsToPush Include="@(UploadToBlobStorageFile)" />
      <ItemsToPush>
        <RelativeBlobPath>assets/core-setup/$(InstallersRelativePath)%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPush>
    </ItemGroup>

    <PushToBlobFeed ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(TransportFeedAccessToken)"
                    ItemsToPush="@(ItemsToPush)"
                    PublishFlatContainer="true"
                    Overwrite="$(OverwriteOnPublish)" 
                    ManifestBuildData="Location=$(ExpectedFeedUrl)"
                    ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
                    ManifestBranch="$(BUILD_SOURCEBRANCH)"
                    ManifestBuildId="$(BUILD_BUILDNUMBER)"
                    ManifestCommit="$(BUILD_SOURCEVERSION)" 
                    AssetManifestPath="$(AssetManifestFilePath)"
                    />
  </Target>

</Project>
