parameters:
  additionalMSBuildArguments: ''
  buildFullPlatformManifest: false
  displayName: ''
  publishRidAgnosticPackages: false
  skipTests: $(SkipTests)
  targetArchitecture: null

jobs:
  - job: ${{ parameters.displayName }}
    displayName: ${{ parameters.displayName }}
    pool:
      # Use a hosted pool when possible.
      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        ${{ if contains(parameters.targetArchitecture, 'arm') }}:
          name: NetCorePublic-Pool
          queue: buildpool.windows.10.amd64.vs2017.open
        ${{ if not(contains(parameters.targetArchitecture, 'arm')) }}:
          name: Hosted VS2017
      ${{ if ne(variables['System.TeamProject'], 'public') }}:
        name: NetCoreInternal-Pool
        queue: buildpool.windows.10.amd64.vs2017
    strategy:
      matrix: 
        debug:
          _BuildConfig: Debug
          _PublishType: none
        release:
          _BuildConfig: Release
          _PublishType: blob
    workspace:
      clean: all
    variables: 
      CommonMSBuildArgs: >-
        /p:ConfigurationGroup=$(_BuildConfig)
        /p:TargetArchitecture=${{ parameters.targetArchitecture }}
        /p:PortableBuild=true
        /p:SkipTests=${{ parameters.skipTests }}
        /p:StabilizePackageVersion=$(IsStable)
        /p:BuildFullPlatformManifest=${{ parameters.buildFullPlatformManifest }}
      MsbuildSigningArguments: >-
        /p:CertificateId=400
        /v:detailed
        /p:SignType=$(SignType)

    steps:

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - task: MicroBuildSigningPlugin@2
        displayName: Install MicroBuild plugin for Signing
        inputs:
          signType: $(SignType)
          zipSources: false
          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
        continueOnError: false
        condition: and(succeeded(), in(variables['SignType'], 'real', 'test'))

    # NuGet's http cache lasts 30 minutes. If we're on a static machine, this may interfere with
    # auto-update PRs by preventing the CI build from fetching the new version. Delete the cache.
    - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
      displayName: Clear NuGet http cache (if exists)

    - script: >-
        build.cmd -ci
        /p:BuildPhase=Binaries
        $(CommonMSBuildArgs)
        /bl:$(Build.SourcesDirectory)\binaries.binlog
      displayName: Build binaries

    # Sign Binaries, signing requires VS MSBuild
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - task: MSBuild@1
        displayName: Sign Binaries
        inputs: 
          solution: '$(Build.SourcesDirectory)\signing\sign.proj'
          msbuildVersion: 15.0
          msbuildArchitecture: x64
          msbuildArguments: >-
            /t:SignBinaries
            $(CommonMSBuildArgs)
            $(MsbuildSigningArguments)
            /bl:$(Build.SourcesDirectory)\sign.binaries.binlog
        condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

    - ${{ if ne(parameters.skipTests, 'true') }}:
      - script: >-
          build.cmd -ci -test
          /p:BuildPhase=Tests
          $(CommonMSBuildArgs)
          /bl:$(Build.SourcesDirectory)\test.binlog
        displayName: Test

    # Following steps followed in sequence only for Windows x86 and Windows x64
    #       Create installers
    #       Sign MSIs
    #       Create bundles
    #       Extract Engine
    #       Sign Engine
    #       Re-attach Bundle
    #       Sign Bundle

    - ${{ if and(ne(parameters.displayName,'Build_Windows_x86'), ne(parameters.displayName,'Build_Windows_x64')) }}:
      - script: >-
          build.cmd -ci
          /p:BuildPhase=Installers
          $(CommonMSBuildArgs)
          /bl:$(Build.SourcesDirectory)\installers.binlog'
        displayName: Create installers
    - ${{ if or(eq(parameters.displayName,'Build_Windows_x86'), eq(parameters.displayName,'Build_Windows_x64')) }}:
      - script: >-
          build.cmd -ci
          /p:BuildPhase=Installers
          /p:InstallersPhaseTarget=BuildInstallers
          $(CommonMSBuildArgs)
          /bl:$(Build.SourcesDirectory)\Installers.BuildInstallers.binlog
        displayName: Create installers (BuildInstallers)

      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - task: MSBuild@1
          displayName: Sign MSI and cab files
          inputs: 
            solution: '$(Build.SourcesDirectory)\signing\sign.proj'
            msbuildVersion: 15.0
            msbuildArchitecture: x64
            msbuildArguments: '/t:SignMsiAndCab
              $(CommonMSBuildArgs) 
              $(MsbuildSigningArguments)'
          condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

      - script: >-
          build.cmd -ci
          /p:BuildPhase=Installers
          /p:InstallersPhaseTarget=BuildCombinedInstallers
          $(CommonMSBuildArgs)
          /bl:$(Build.SourcesDirectory)\Installers.BuildCombinedInstallers.binlog
        displayName: Create bundles (BuildCombinedInstallers)

      - script: >-
          build.cmd -ci
          /p:BuildPhase=Installers
          /p:InstallersPhaseTarget=ExtractEngineBundle
          $(CommonMSBuildArgs)
          /bl:$(Build.SourcesDirectory)\Installers.ExtractEngineBundle.binlog
        displayName: Extract Engine from Bundle (ExtractEngineBundle)

      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - task: MSBuild@1
          displayName: Sign Engine
          inputs: 
            solution: '$(Build.SourcesDirectory)\signing\sign.proj'
            msbuildVersion: 15.0
            msbuildArchitecture: x64
            msbuildArguments: '/t:SignEngine 
              $(CommonMSBuildArgs) 
              $(MsbuildSigningArguments)
              /bl:$(Build.SourcesDirectory)\sign.engine.binlog'
          condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

      - script: >-
          build.cmd -ci
          /p:BuildPhase=Installers
          /p:InstallersPhaseTarget=ReattachEngineToBundle
          $(CommonMSBuildArgs)
          /bl:$(Build.SourcesDirectory)\Installers.ReattachEngineToBundle.binlog
        displayName: Re-attach Engine (ReattachEngineToBundle)

      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - task: MSBuild@1
          displayName: Sign Bundle
          inputs: 
            solution: '$(Build.SourcesDirectory)\signing\sign.proj'
            msbuildVersion: 15.0
            msbuildArchitecture: x64
            msbuildArguments: '/t:SignBundle  
              $(CommonMSBuildArgs) 
              $(MsbuildSigningArguments)
              /bl:$(Build.SourcesDirectory)\sign.bundle.binlog'
          condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))
    # Publish all build assets
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - script: >-
          $(Build.SourcesDirectory)\eng\common\msbuild.ps1
          $(Build.SourcesDirectory)\publish\publish.proj
          $(_CommonPublishArgs)
          $(CommonMSBuildArgs)
          /p:PublishType=$(_PublishType)
          /p:PublishRidAgnosticPackages=${{ parameters.publishRidAgnosticPackages }}
          /bl:$(Build.SourcesDirectory)\publish.binlog
        displayName: Publish build assets
        condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '*.xml' 
        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
      continueOnError: true
      condition: always()

    - task: CopyFiles@2
      displayName: Copy Files to $(Build.StagingDirectory)\BuildLogs
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          *.log
          *.binlog
        TargetFolder: '$(Build.StagingDirectory)\BuildLogs'
        CleanTargetFolder: true
      continueOnError: true
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact BuildLogs
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)\BuildLogs'
        ArtifactName: ${{ parameters.displayName }}-$(_BuildConfig)
      continueOnError: true
      condition: succeededOrFailed()
