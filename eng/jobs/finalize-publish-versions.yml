parameters:
  DependsOn: {}
jobs:

# Publish to dotnet/versions repo.
- job: Finalize_Publish_Versions
  displayName: Finalize_Publish_Versions
  dependsOn: ${{ parameters.DependsOn }}
  pool:
    name: Hosted VS2017
  variables:
  - name: _GitHubUser
    value: ${{ coalesce(variables.GitHubUser, 'dotnet-build-bot') }}
  - name: _GitHubEmail
    value: ${{ coalesce(variables.GitHubEmail, 'dotnet-build-bot@microsoft.com') }}
  - name: _GitHubAuthToken
    value: ${{ coalesce(variables.GitHubAuthToken, '$(AccessToken-dotnet-build-bot-public-repo)') }}
  - name: _VersionsRepoOwner
    value: ${{ coalesce(variables.VersionsRepoOwner, 'dotnet') }}
  - name: _VersionsRepo
    value: ${{ coalesce(variables.VersionsRepo, 'versions') }}

  - name: _DotNetVersionsArgs
    value: >-
      /p:GitHubUser=dotnet-build-bot
      /p:GitHubEmail=dotnet-build-bot@microsoft.com
      /p:GitHubAuthToken=$(AccessToken-dotnet-build-bot-public-repo)
      /p:VersionsRepoOwner=dotnet
      /p:VersionsRepo=versions
      /p:VersionsRepoPath=build-info/dotnet/core-setup/$(FullBranchName)

  steps:
  # Initialize tooling
  - script: build.cmd -- /t:BuildTraversalBuildDependencies
    displayName: Initialize tooling

  - powershell: |
      $prefix = "refs/heads/"
      $branch = "$(Build.SourceBranch)"
      $branchName = $branch
      if ($branchName.StartsWith($prefix))
      {
        $branchName = $branchName.Substring($prefix.Length)
      }
      Write-Host "For Build.SourceBranch $branch, FullBranchName is $branchName"
      Write-Host "##vso[task.setvariable variable=FullBranchName;]$branchName"
    displayName: Find true SourceBranchName

  - task: MSBuild@1
    displayName: Publish (versions)
    inputs: 
      solution: $(Build.SourcesDirectory)\publish\publish-type.proj
      platform: x64
      configuration: Release
      msbuildVersion: 15.0
      msbuildArchitecture: x64
      msbuildArguments: >-
        /p:PublishType=versions
        $(_DotNetVersionsArgs)
        $(_CommonPublishArgs)
        /bl:$(Build.SourcesDirectory)\publishversions.binlog

  - task: CopyFiles@2
    displayName: Copy Files to $(Build.StagingDirectory)\BuildLogs
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.log
        **/*.binlog
      TargetFolder: '$(Build.StagingDirectory)\BuildLogs'
    continueOnError: true
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact BuildLogs
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)\BuildLogs'
      ArtifactName: Finalize_Publish_Versions
    condition: succeededOrFailed()
